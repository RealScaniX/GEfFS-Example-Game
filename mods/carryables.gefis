This is Carryables by ScaniX
/*
 *		This file contains some inventory items that are not bound to a specific place or enemy in the game.
 */

uses walkman by Scanix
uses flashlight by Scanix

/************************************************************
 * scar
 */
there is a thing called scar
	its description is "This is your life long reminder of the tragedy. Your left arm has been broken badly and there has been an open flesh wound as well. There has even been
			a little infection caused by the rusty metal to top it off. Still, you would be glad if you were the only one that got injured."
	//its smell is "The scar smells of dead dog."
	its smell is "The scar smells of suffering and death."
	its taste is "Licking across your skin, you get a salty taste in your mouth, not too different from tears."
	its sound is "It it could, it would tell a horrible story."
	its useProc is "useScar"

function useScar
	do
		say "Wearing it is all you can do with it."

before action dropItem
	if itm is scar
		say "This cannot be dropped."
		return

before action takeItem
	if itm is scar
		say "You already have this, probably forever."
		return

/************************************************************
 * ball
 */
there is an item called ball
	its description is "Although you have looked for this thing for a long time, it is still a simple, dark blue plastic ball. It looks pretty old as well."
	its smell is @"It smells of plastic and lots of fun.[if !nightmare.killed] And also of blood and death.[end]"
	its sound is "This can sound like cheering or a breaking window, depending on how it is handled. At the moment it is silent, though."
	its taste is "Nope."
	its useProc is "useBall"

function useBall
	do
		say "You better wait until you are not alone."

Entity Marble is an Item
	its description is @"This is a [+this.color] marble."
	attributes
		text color
		
there is a marble called red marble
	its color is "red"

there is a marble called blue marble
	its color is "blue"

there is a marble called green marble
	its color is "green"

there is a marble called yellow marble
	its color is "yellow"

there is a marble called purple marble
	its color is "purple"

there is a marble called orange marble
	its color is "orange"

there is a marble called silver marble
	its color is "silver"

there is a container called marble pouch
	its description is "This your trusty bag of colorful marbles. It would be more impressive if you hadn't just lost all of them in a game recently."
	its items are {red marble}
	its carryable is true

a circle key is a key
	its description is @"The metal feels slightly warm to the touch. Other than that this seems to be a pretty normal [+this.color] key with a circular head piece."
	attributes
		text color

there is a circle key called red key
	its color is "red"

there is a circle key called orange key
	its color is "orange"

there is a circle key called blue key
	its color is "blue"

there is a circle key called purple key
	its color is "purple"

there is a circle key called green key
	its color is "green"

there is a circle key called key of light
	its color is "white"
	its illumination is 80
	its description is "This key seems to be made of pure light, which wouldn't make sense as you can clearly touch it. Still you keep thinking that this thing does not belong
			in the reality."
	its smell is "This smells of freedom like nothing else."
	its taste is "The key of light tastes minty fresh."
	its sound is "This sounds like pure energy. How do you know that? You just do."

after action dropItem
	if itm is key of light
		say "The key's bright light vanishes after you let go of it and you can only recognize a faint glow now."

after action takeitem
	if itm is key of light
		say "As you touch the key, the bright light returns and illuminates the room."

/************************************************************
 * pen and paper, garden map
 */
there is an item called garden map
	its name is "map"
	its actions are {"look at", "rise", "lower"}
	its description is @[gardenMapDesc]

function gardenMapDesc
	do
		append "You look at your professionally drawn map of the garden to check your progress.\n"
		now mappedPortion is 0
		for y from 0 to globals.gardenHeight-1
			for x from 0 to globals.gardenWidth-1
				tile = globals.gardenTiles.(y).(x)
				if tile.mapped
					mappedPortion = mappedPortion + 1
		append "You guess that you have mapped about [+rounded value of (mappedPortion * 100.0 / (globals.gardenWidth*globals.gardenHeight) + (random number between 0 and 5))]% 
				of the whole garden. Plus minus five percent."

understand
	"look at map" as "look at garden map"

there is an item called sketch pad
	its description is @[addOneTimeEvent "sketchPadDesc"]
	its useProc is "penAndPaperUse"
	its useWithProc is "penAndPaperUse"
	its discovered is false

function sketchPadDesc
	do
		say "It is a small sketch pad with plain white pages. It is missing some pages that have been torn off.
					The remaining ones are empty except for the top sheet which contains these words:"
		wait for 6 seconds
		say "\"Sometimes there isn't anything left to do, but hug your memory one last time and let it go.\"\n"
		wait for 6 seconds
		say "The word \"[\]memory\" is a bit smudgy as if the ink has come in contact with a drop of water or something."
		wait for 6 seconds
		say "What a strange thing to find now. You start to believe that everything in this house has something to do with you personally.\n"
		wait for 7 seconds

there is an item called pen
	its description is "It is a green ball pen. At least the plastic shell is green.\nTesting it on your palm, you see that the ink has the standard dark blue color."
	its useProc is "penAndPaperUse"
	its useWithProc is "penAndPaperUse"
	its discovered is false

function penAndPaperUse
	do
		if [playerOwns pen] and [playerOwns sketch pad]
			if player.location is a gardenTile
				if not globals.gardenMapping
					say "Flipping over a page on the sketch pad, you start to draw a map of the garden on a sheet of paper."
					globals.gardenMapping = true
					addToInv garden map
					gardenMapping
				else
					say "You are already drawing a map of the garden."
			else
				say "You cannot think of anything to draw at the moment."
		else if [playerOwns pen]
			if player.location is a gardenTile
				say "Armed with your pen, you look around for a fitting victim. But then you feel powerless as you look at the large garden around you and suddenly know that
					no one would ever find your writings in this terrain."
			else
				say "Thinking about drawing some cool things on the walls, you come to the conclusion that it would be in vain as the word \"[\]abandoned\" in abandoned house 
					isn't really promising a large number of people who would see it."
		else if [playerOwns sketch pad]
			say "The sketch pad is a good start, but you would need something to produce lines when dragged across the paper.\nYou think about biting your finger for a moment,
					but then you decide that you are not that desperate. Yet."

action lowermap
	understand
		lower garden map
		lower map
	do
		if ![playerOwns garden map]
			say "Lower what?"
			return
		if temps.gardenMapShowing
			temps.gardenMapShowing = false
			hide overlay "ne"
			say "You lower the map and concentrate on your surroundings."
		else
			say "You aren't holding that up at the moment."

action raisemap
	understand
		raise garden map
		raise map
		hold garden map up
		hold map up
	do
		if ![playerOwns garden map]
			say "Raise what?"
			return
		if player.location is not a gardenTile
			say "You have no map of this place."
			return
		if not temps.gardenMapShowing
			temps.gardenMapString = null
			say "You raise the map to find your path."
			displayGardenMap
		else
			say "You are already holding the map up."

/************************************************************
 * antidote
 */
there is a valuesponge called OneStats
	its antidotes is 0

there is an item called antidote
	its description is "It's a little flask with some greenish, thick fluid inside. On the outside there is a sticker with a single word: Antidote\n"
	its smell is "You take off the lid for a moment and take a whiff of it. You are totally sure that this is a prime example of a green smell. It strongly smells of all that
			nature stuff: Vegetables, herbs and other plants, mixed together with a breeze of fresh air."
	its taste is "This is some sort of medicine. You are not willingly tasting this until you are really sick."
	its sound is "If you squeeze it, the small plastic bottle does a little *click* sound."
	its combatUse is true
	its useProc is "useAntidote"

function useAntidote
	do
		if !currentFight.finished and (currentFight.player.poisonDOT > 0 or player.fear > 15)
			OneStats.antidotes = OneStats.antidotes + 1
			currentFight.player.poisonDOT = -1000 // defend against future poisoning
			say "With a sigh you open the antidote and pour the fluid into your mouth. You take big gulps to avoid tasting it too much."
			wait for 5 seconds
			say "You feel the sickness shy away from the power of natural life force. Just one or two seconds later the "
			soothe 35, "pleasant tingle"
			say " has spread out through your whole body and the bad feeling is gone. In addition you feel better altogether now."
			wait for 5 seconds
			say "When you want to throw away the empty bottle, you notice that there isn't anything in your hand anymore."
		else
			say this.taste

understand 
	"drink antidote" as "use antidote"


/************************************************************
 * The match. Not much light and is used up quite fast.
 */
there is an item called box of matches
	its description is @"These are your lucky matches. \"Lucky\", because you consider yourself lucky that your mother hasn't noticed you carrying those around in your 
						pocket yet."
	its smell is "This smells of forbidden adventure."
	its sound is @"Shaking it and listening closely to the rattling sound of the matches inside, you [one of]guess[or]estimate[or]calculate[at random] there are
						precisely [+random number between 2 and 12] of them left."
	its taste is "You shouldn't get that wet if you want the matches to still work."
	its useProc is "lightmatch"

there is a lightsource called match
	its illumination is 10
	its steps is 5
	its lit is true

function lightmatch
	do
		lightsource.match.usedSteps = 0
		setlightsource lightsource.match
		say "You pick out one of the remaining [+random number between 2 and 12] matches and ignite it on the rough side of the box."
		say "A small flash and tiny sparks are the first things that can be seen in the dark, then the small flame casts a flickering light that makes the shadows 
				dance around you. You are wondering if that makes you even more uneasy than standing in the dark..."

understand
	"light match" as "use box of matches"
