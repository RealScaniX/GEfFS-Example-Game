This is Combat by ScaniX

Entity Combat is an Entity
	attributes
		combatant player
		combatant enemy 
		bool enemyStarts is false
		bool playersTurn is false		// true as long the player did not invoke a fight action (block, attack, use item)
		bool finished is true			// if we are not fighting, it is finished
		list events

Entity Combatant is a thing
	attributes
		number constitution     // either darkness or nothing (as the player health is processed differently)
		number hp					// current health, is set to health at the beginning of the fight
		number strength			// either light or darkness
		text attackProc			// called to attack, the return value is damage done
		text woundProc				// called to receive damage, if this returns true the combatant is defeated and the fight is over
										// the damage to process will be stored in the variable "dmg"
		text introProc				// called when the fight starts
		list dropTable				// list of items that the enemy will drop after being defeated in the form {Entity item, number probability}
		bool defends				// if true, the combatant tries to block an attack, reducing the damage
		number level				// the level of the enemy (1-10), for a player the glow is used
		number encounterCounter // the number of encounters we had with this
		bool droppedItem			// if true, this enemy already dropped the loot

entity Weapon is a Equippable
	its useProc is "equipItem"
	attributes
		number strength
		text attackProc is "defaultWeaponAttack"
		text hitProc is "defaultWeaponHit"
		number critChance is 5
		text weaponName is @this.name

function defaultWeaponAttack
	do
		now weaponName is wpn.weaponName
		say "[one of]You lounge forward and attack the [+enemyName] with your [+weaponName].
				[or]You try to hit the enemy with your [+weaponName].
				[at random]"

function defaultWeaponHit
	do
		now weaponName is wpn.weaponName
		if dmgFactor < 0.95
			say "You graze the enemy with your [+weaponName]."
		else if dmgFactor > 1.05
			say "You're able to land a nice hit with your [+weaponName]."
		else
			say "You hit the [+enemyName]."

entity Armor is a Equippable
	its useProc is "equipItem"
	attributes
		list bodyparts		// "head", "top", "legs", "hands", "waist": you cannot wear two armors at the same time that cover the same region

Entity Item
	attributes
		bool combatUse is false

There is a Combat called currentFight
	it is static // don't save
	its player is player Combatant


/************************************************************************************************
 *		The fighting mode
 */
mode Fight
   its prompt is "Fight!"
   its status info is @[fightStatusInfo]
	allowed actions
		attack
		unequip
		defend
		use item
		use
		usewith
		lookat
		smell
		taste
		listen
	before action do
		currentFight.playersTurn = true
		currentFight.player.defends = false
		currentFight.enemy.defends = false
   after action do
		if currentFight.finished
			end mode
		else
			if !currentFight.playersTurn
				invoke function "doEnemyTurn" on currentFight.enemy
			if !currentFight.finished
				fightPrompt
			else
				end mode
	on start do
		globals.fightMusic = "Exciting Trailer.mp3"
		playMusic globals.fightMusic, 100
		playAmbience null, 100
		currentFight.finished = false
		/************************************
				fill in enemy values
		*************************************/
		now currentFight.enemy.hp is currentFight.enemy.constitution
		/************************************
				fill in player values
		*************************************/
		// player health is taken from fear, no need to set a hp here
		currentFight.player.strength = 3 + (player.glow / 2 + player.illumination / 4) % 10000 // modulo converts it to an int ^-^
		// add weapon strength
		now wpn is unarmed
		now ilist is [inventoryList]
		for each itm in ilist
			if itm is a weapon and itm.equipped
				wpn = itm
				break
		currentFight.player.strength = currentFight.player.strength + wpn.strength
		/************************************
				enemy has the first attack?
		*************************************/
		say "\n"
		if currentFight.enemy.encounterCounter is 0
			if currentFight.enemy.introProc is not null
				invoke function currentFight.enemy.introProc on currentFight.enemy
		else
			say "A [+currentFight.enemy.name] is attacking you."
		currentFight.enemy.encounterCounter = currentFight.enemy.encounterCounter + 1
		now currentFight.playersTurn is !currentFight.enemyStarts
		fightPrompt
	on end do
		updateaudio
		mainPrompt

function fightStatusInfo
	do
		return "<div style=\"float:right;\">
						<htmlbar \"Enemy\" [+currentFight.enemy.hp]/[+currentFight.enemy.constitution]>
						<htmlbar \"Fear\" [+player.fear]/100>
					</div>Your opponent: [+currentFight.enemy.name]\n
							Your strength: [+currentFight.player.strength]"

function fightPrompt
	do
		eventProcessing
		say "\nWhat are you going to do? [link attack]attack[/link] [link defend]defend[/link] [link use item]use item[/link] [link flee]flee[/link]"

function startFight
	understand
		startFight [enmy]
	do
		if not (enmy is a combatant)
			return
		now currentFight.enemy is enmy
		now currentFight.enemyStarts is false // todo: calculate somehow depending on the situation
		start Fight mode

function doEnemyTurn
	do
		// attack player
		if currentFight.enemy.attackProc is not null
			now dmg is [invoke function currentFight.enemy.attackProc on currentFight.enemy]
			if dmg > 0
				now enemyName is currentFight.enemy.name
				now enemyLevel is currentFight.enemy.level
				if [invoke function currentFight.player.woundProc on currentFight.player]
					// the player already ran home because of his fear
					currentFight.finished = true

	
/************************************************************************************************
 *		Altering functions during combat
 */
before function updateaudio
	if !currentFight.finished
		// keep playing fight music
		return

before action navigate
	if !currentFight.finished
		say "You cannot leave in the middle of a fight."
		return	
		
before action takeitem
	if !currentFight.finished
		say "You have to hold your greed at bay until after this fight."
		return	
		
before action dropitem
	if !currentFight.finished
		say "This is not the time to sort out the trash."
		return	
		
before action use
	if !currentFight.finished
		now t is [resolveitem t]
		if t is an item and !t.combatUse
			say "You cannot use that now."
			return

		
/************************************************************************************************
 *		Player actions
 */
action flee
	modes
		fight
	do
		say "Do you really want to get away from here?"
		ask whether "Flee?"
		if !user.consented or user.canceled
			return
		now currentFight.playersTurn is false
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		if player.location.navigatable and (chance of 80 - enemyLevel * 10)
			say "You manage to slip away and your opponent seems not interested enough to follow you."
			player.location = alternative entry hall
			currentFight.finished = true
		else
			say "you don't get away fast enough."

action defend
	modes
		fight
	do
		now currentFight.playersTurn is false
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		currentFight.player.defends = true

action attack
	modes
		fight
	do
		now currentFight.playersTurn is false
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		now dmg is [invoke function currentFight.player.attackProc on currentFight.player]
		if dmg > 0
			if [invoke function currentFight.enemy.woundProc on currentFight.enemy]
				// the player killed it
				say "The [+enemyName] dissolves to rejoin the shadows."
				// drop something
				// add experience points (glow)
				if player.glow < enemyLevel * 10
					player.glow = player.glow + (enemyLevel * 10 - player.glow) / 2
					say "As your foe disappears in front of you, you cannot help but feel more confident in yourself having subdued that creature."
				currentFight.finished = true

action use item
	modes
		fight
	do
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		// list all combat usable items and ask player what he wants to use
		say "What do you want to use?"
		now ilist is [inventoryList]
		now clist is a new list
		for each itm in ilist
			if itm.combatUse
				add itm to clist
		if clist.# is 0
			say "You don't seem to have anything on you that could be used in combat."
		else
			i = 0
			for each itm in clist
				say "[if i > 0], [end]<link use [+itm.name]>[+itm.name]</link>"
				i = i + 1
			say "\n"

action unequip
	understand
		unequip [itm]
	do
		if itm is an equippable
			if itm.equipped
				itm.equipped = false
				say "You unequip the [+itm.name]."
			else
				say "You already have."
		else
			say "You cannot even equip that in the first place."

function equipItem
	do
		if this.equipped
			if this is a weapon
				say "You already wield the [+this.name]."
			else
				say "You already wear the [+this.name]."
			return
		now ilist is [inventoryList]
		for each itm in ilist
			if this is a weapon
				if itm is a weapon and itm.equipped
					say "You unequip the [+itm.name]. "
					itm.equipped = false
					break
			else
				// unequip colliding parts
		say "You equip the [+this.name]."
		this.equipped = true
		
action fight
	do
		startFight dark spark
