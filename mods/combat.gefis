This is Combat by ScaniX

there is a valuesponge called globals
	its fightMusic is null
	its wonCount is 0
	its lostCount is 0

Entity Combat is an Entity
	attributes
		combatant player
		combatant enemy 
		bool enemyStarts is false
		bool playersTurn is false		// true as long the player did not invoke a fight action (block, attack, use item)
		bool finished is true			// if we are not fighting, it is finished
		bool won is false					// true if the player has won
		list events
		bool printExtraPrompt				// true if this has been triggered in an event which has to be handled slightly differently because of the display of the prompt afterwards

Entity Combatant is a thing
	attributes
		number constitution									// either darkness or nothing (as the player health is processed differently)
		number hp												// current health, is set to health at the beginning of the fight
		number strength										// either light or darkness
		weapon weapon											// the current weapon (only for player)
		text attackProc										// called to attack, the return value is damage done
		text woundProc											// called to receive damage, if this returns true the combatant is defeated and the fight is over
																	//		the damage to process will be stored in the variable "dmg"
		text introProc											// called when the enemy appears for the very first time
		text appearProc										// called when the fight starts
		list lootTable											// list of items that the enemy will drop after being defeated in the form {Entity item, number probability}
		bool defends											// if true, the combatant tries to block an attack, reducing the damage
		number level											// the level of the enemy (1-10), for a player the glow is used
		number encounterCounter								// the number of encounters we had with this
		number defeatedCount									// the number of kills of this enemy
		bool droppedItem										// if true, this enemy already dropped the loot
		number specialAttackPrepare is 0					// preparing a special attack
		number specialAttackCooldown is 0				// cooldown for special attack, automatically managed in combat, 
																	//		enemy only has to check if > 0 to not allow special attack
		text fightMusic is "Urban Gauntlet.mp3"		// track to play during fight
		number poisonDOT										// the damage per round that is caused by poison
		bool poisonous											// if true a fraction of the damage is added as poison dmg
		bool killed												// true if this enemy is no longer attacking the player (defeated more than 10 times)
		text hugProc											// reaction to hugging
		bool wantsFight is true

entity item
	attributes
		text dropSound is "thump.ogg"

entity Weapon is a Equippable
	its useProc is "equipItem"
	attributes
		number strength
		text attackProc is "defaultWeaponAttack"
		text hitProc is "defaultWeaponHit"
		number critChance is 5
		text weaponName is @this.name
		bool poisonous											// if true a fraction of the damage is added as poison dmg

function defaultWeaponAttack
	do
		now weaponName is wpn.weaponName
		now temps.weaponName is weaponName
		say "[one of]You lounge forward and attack the [+enemyName] with your [+weaponName].
				[or]You try to hit the enemy with your [+weaponName].
				[at random]"

function defaultWeaponHit
	do
		now weaponName is temps.weaponName
		if dmgFactor < 0.95
			say "You graze the enemy with your [+weaponName]."
		else if dmgFactor > 1.05
			say "You're able to land a nice hit with your [+weaponName]."
		else
			say "You hit the [+enemyName]."

entity Armor is a Equippable
	its useProc is "equipItem"

Entity Item
	attributes
		bool combatUse is false

There is a Combat called currentFight
	it is static // don't save
	its player is player Combatant


/************************************************************************************************
 *		The fighting mode
 */
mode Fight
   its prompt is @"[one of]Fight![or]Fight?[at random]"
   its status info is @[fightStatusInfo]
	allowed actions
		attack
		equip
		unequip
		defend
		use item
		use
		usewith
		lookat
		smell
		taste
		listen
		flee
		inventorying
		huggies
	before action do
		temps.prompted = false
		story log off
		currentFight.printExtraPrompt = true
		currentFight.player.defends = false
		currentFight.enemy.defends = false
		if !currentFight.playersTurn
			invoke function "doEnemyTurn" on currentFight.enemy
   after action do
		currentFight.printExtraPrompt = false
		if currentFight.finished
			endFight
		else
			if !currentFight.playersTurn
				invoke function "doEnemyTurn" on currentFight.enemy
			if !currentFight.finished
				// poison
				if !currentFight.playersTurn and currentFight.player.poisonDOT > 0
					dmg = currentFight.player.poisonDOT
					say "The attack of the [+currentFight.enemy.name] has "
					scare 0, "[one of]made you sick[or]caused an illness[at random]"
					say " and [one of]gradually reduces your constitution[or]you feel more and more queasy[at random]."
					now poisonAttack is true
					if [woundPlayer]
						endFight
						return
				currentFight.playersTurn = true
				fightPrompt
			else
				endFight
	on start do
		globals.fightMusic = currentFight.enemy.fightMusic
		playMusic globals.fightMusic, 80
		playAmbience null, 100
		currentFight.finished = false
		currentFight.won = false
		/************************************
				fill in enemy values
		*************************************/
		now currentFight.enemy.hp is currentFight.enemy.constitution
		now currentFight.enemy.specialAttackPrepare is 0
		now currentFight.enemy.poisonDOT is 0
		/************************************
				fill in player values
		*************************************/
		now currentFight.player.poisonDOT is 0
		// player health is taken from fear, no need to set a hp here
		updatePlayerWeapon
		/************************************
				enemy has the first attack?
		*************************************/
		say "\n"
		if currentFight.enemy.encounterCounter is 0 and currentFight.enemy.introProc is not null
			invoke function currentFight.enemy.introProc on currentFight.enemy
		else if currentFight.enemy.appearProc is not null
			invoke function currentFight.enemy.appearProc on currentFight.enemy
		else
			say "A [+currentFight.enemy.name] is attacking you."
		story log off
		currentFight.enemy.encounterCounter = currentFight.enemy.encounterCounter + 1
		now currentFight.playersTurn is !currentFight.enemyStarts
		//if currentFight.printExtraPrompt
		fightPrompt
	on end do
		updateaudio
		//if currentFight.printExtraPrompt
		mainPrompt
		currentFight.printExtraPrompt = false

function updatePlayerWeapon
	do
		currentFight.player.strength = integer value of (player.glow / 2 + player.illumination / 15)
		now wpn is unarmed
		now ilist is [inventoryList]
		for each itm in ilist
			if itm is a weapon and itm.equipped
				wpn = itm
				break
		currentFight.player.weapon = wpn
		// add weapon strength
		currentFight.player.strength = currentFight.player.strength + currentFight.player.weapon.strength

function fightStatusInfo
	do
		return "<div style=\"float:right;\">
						<htmlbar \"Enemy\" [+int value of currentFight.enemy.hp]/[+int value of currentFight.enemy.constitution]><br/>
						<htmlbar \"Fear\" [+int value of player.fear]/100>
					</div>Your opponent: [+currentFight.enemy.name]\n
							Your weapon: [+currentFight.player.weapon.name] ([+currentFight.player.strength])"

function fightPrompt
	do
		eventProcessing
		if !temps.prompted
			temps.prompted = true
			if currentFight.playersTurn
				say "\nWhat are you going to do?\n
						<link attack>[image combat_attack.png]attack</link>,
						<link defend>[image combat_defend.png]defend</link>,
						<link use item>[image combat_item.png]use an item</link>,
						<link flee>[image combat_flee.png]flee</link> or...\n"

function endFight
	do
		currentFight.finished = true
		if currentFight.player.poisonDOT > 0
			currentFight.player.poisonDOT = 0
			say "The illness has left your body at the same time your opponent has gone from your sight."
		story log on
		if currentFight.won
			currentFight.enemy.defeatedCount = currentFight.enemy.defeatedCount + 1
			globals.wonCount = globals.wonCount + 1
			if currentFight.enemy.droppedItem and currentFight.enemy.defeatedCount >= 5
				// remove this encounter if the player killed it 5 times
				currentFight.enemy.killed = true
				removeEncounter currentFight.enemy
			else if currentFight.evemy.droppedItem
				// reduce probability if player got the item
				for each enc in player.location.encounters
					if enc.enemy is currentFight.enemy
						enc.probability = 5
		else
			globals.lostCount = globals.lostCount + 1
		end mode		

function resolveEnemy
	understand
		resolveEnemy [enmy]
	do
		if enmy is a combatant
			return enmy
		if enmy is a phrase
			for each cmb in combatant.*
				if cmb.name == enmy.name
					return cmb
		return null

function startFight
	understand
		startFight [enmy]
	do
		//rememberAmbiencePos
		rememberMusicPos
		if enmy is not a combatant
			return
		now currentFight.enemy is enmy
		now currentFight.enemyStarts is false // todo: calculate somehow depending on the situation
		start Fight mode

function doEnemyTurn
	do
		now enemyIsPassing is currentFight.enemy.specialAttackPrepare < 0
		if !enemyIsPassing
			say "\n" // spacing before enemy attack block
		// check for poison dmg
		if currentFight.enemy.poisonDOT > 0
			dmg = currentFight.enemy.poisonDOT
			say "[one of]Your attack has caused a poisoning which takes its toll now[or]You feel the pain of your opponent as the poison is spreading[at random]."
			now poisonAttack is true
			if [woundEnemy]
				return
		// attack player
		now poisonAttack is false
		now specialAttack is false
		if currentFight.enemy.attackProc is not null
			if currentFight.enemy.specialAttackPrepare > 0
				currentFight.enemy.specialAttackCooldown = 5
				now specialAttack is true
			else if currentFight.enemy.specialAttackCooldown > 0
				currentFight.enemy.specialAttackCooldown = currentFight.enemy.specialAttackCooldown - 1
			now dmg is [invoke function currentFight.enemy.attackProc on currentFight.enemy]
			if dmg > 0
				now poisonAttack is false
				if not [woundPlayer]
					if currentFight.enemy.poisonous
						say "You feel a sickness inside of you rising."
						currentFight.player.poisonDOT = currentFight.player.poisonDOT + (dmg / 8)
						if currentFight.player.poisonDOT > 20
							currentFight.player.poisonDOT = 20
						//debugSay "PoisonDOT: " + currentFight.player.poisonDOT
			if !enemyIsPassing
				wait for 5 seconds

function woundPlayer
	do
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		if [invoke function currentFight.player.woundProc on currentFight.player]
			// the player already ran home because of his fear
			currentFight.won = false
			currentFight.finished = true
		return currentFight.finished
	
/************************************************************************************************
 *		Altering functions during combat
 */
before function updateaudio
	if !currentFight.finished
		// keep playing fight music
		return

before action navigate
	if !currentFight.finished
		say "You cannot leave in the middle of a fight."
		return	
		
before action takeitem
	if !currentFight.finished
		say "You have to hold your greed at bay until after this fight."
		return	
		
before action dropitem
	if !currentFight.finished
		say "This is not the time to sort out the trash."
		return	
		
before action use
	if !currentFight.finished
		now t is [resolveitem t]
		if t is an item and !t.combatUse
			say "You cannot use that now."
			return

after action use
	if !currentFight.finished
		now currentFight.playersTurn is false
		wait

after action equip
	if !currentFight.finished
		updatePlayerWeapon
		now currentFight.playersTurn is false
		wait
	
after action unequip
	if !currentFight.finished
		updatePlayerWeapon
		now currentFight.playersTurn is false
		wait
		
/************************************************************************************************
 *		Player actions
 */
action flee
	modes
		fight
	do
		say "Do you really want to get away from here?"
		ask whether "Flee?"
		if !user.consented or user.canceled
			return
		now currentFight.playersTurn is false
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		if player.location.navigatable and (chance of 100 - enemyLevel * 5)
			say "You manage to slip away and your opponent seems not interested enough to follow you."
			player.location = alternative entry hall
			currentFight.finished = true
		else
			say "[one of]You don't get away fast enough[or]You try to slip away, but your opponent suddenly stands in your way[at random]."
		wait for 5 seconds

action defend
	modes
		fight
	do
		say "Sensing an incoming threat you decide to raise your hands and prepare for it."
		now currentFight.playersTurn is false
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		currentFight.player.defends = true
		wait for 5 seconds

action attack
	modes
		fight
	do
		now currentFight.playersTurn is false
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		now dmg is [invoke function currentFight.player.attackProc on currentFight.player]
		if dmg > 0
			//debugSay "Player attack DMG: [+dmg]"
			if not [woundEnemy] and currentFight.player.weapon.poisonous
				say "Your weapon leaves something that will fight the enemy from the inside."
				currentFight.enemy.poisonDOT = currentFight.enemy.poisonDOT + (dmg / 8)
				//debugSay "Enemy poisonDOT: " + currentFight.enemy.poisonDOT
		if currentFight.finished
			wait
		else
			wait for 5 seconds

function woundEnemy
	do
		if [invoke function currentFight.enemy.woundProc on currentFight.enemy]
			// the player killed it
			currentFight.won = true
			// there already has been enough text in the enemy woundproc
			//say "The [+enemyName] dissolves to rejoin the shadows."
			// drop something
			dropEnemyLoot
			// add experience points (glow)
			if player.glow < enemyLevel * 15
				glow (enemyLevel * 15 - player.glow) / 2
				say "As your foe disappears in front of you, you cannot help but feel more confident in yourself having subdued that creature."
			currentFight.finished = true
			return true
		return false

function dropEnemyLoot
	do
		for each ch <= itmname in currentFight.enemy.lootTable
			now oneTimeDrop is false
			if ch < 0
				ch = |ch|
				oneTimeDrop = true
			if chance of ch
				now itm is item.(itmname)
				say "[one of]The [+enemyName] drops [a|an] [+itm.name][or][A|an] [+itm.name] appears out of nowhere and drops to the floor[at random]."
				addToContainer player.location, itm
				if itm.dropSound is not null
					play itm.dropSound on audio channel "sound"
				if oneTimeDrop
					// remove from ALL enemies
					//remove itmname from currentFight.enemy.lootTable
					for each cmb in combatant.*
						remove itmname from cmb.lootTable
				break

action use item
	modes
		fight
	do
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		// list all combat usable items and ask player what he wants to use
		say "What do you want to use?"
		now ilist is [inventoryList]
		now clist is a new list
		for each itm in ilist
			if itm.combatUse
				add itm to clist
		if clist.# is 0
			say "You don't seem to have anything on you that could be used in combat."
		else
			say "Thinking about the stuff in your pockets, these things might be useful in this situation:\n"
			i = 0
			for each itm in clist
				say "[if i > 0], [end]<link use [+itm.name]>[+itm.name]</link>"
				i = i + 1
			say "\n"

action unequip
	understand
		unequip [itm]
		stash [itm]
		put away [itm]
	do
		itm = [resolveItem itm]
		if itm is null
			say "You cannot see that here."
		else if itm is an equippable
			if itm.equipped
				itm.equipped = false
				say "You unequip the [+itm.name]."
			else
				say "You already have."
		else
			say "You cannot even equip that in the first place."

action equip
	understand
		equip [itm]
		wield [itm]
	do
		itm = [resolveItem itm]
		if itm is null
			say "You cannot see that here."
		else if itm is an equippable
			invoke function "equipItem" on itm
		else
			say "You cannot equip that."

function equipItem
	do
		if this.equipped
			if this is a weapon
				say "You already wield the [+this.name]. Do you want to <link unequip [+this.name]>unequip it</link>?"
			else
				say "You already wear the [+this.name]. Do you want to <link take off [+this.name]>take it off</link>?"
			return
		now ilist is [inventoryList]
		for each itm in ilist
			if this is a weapon
				if itm is a weapon and itm.equipped
					say "You unequip the [+itm.name]. "
					itm.equipped = false
					break
			else
				// unequip colliding parts
		say "You equip the [+this.name]."
		this.equipped = true

/*
action hug enemy
	understand
		hug enemy
		hug opponent
	modes
		combat
	do
		now enm is currentFight.enemy
		invoke action "huggies"
*/

action huggies
	understand
		hug [enm]
		embrace [enm]
		pet [enm]
		cuddle [enm]
		cuddle with [enm]
		caress [enm]
		stroke [enm]
	do
		if currentFight.finished
			now itm is [resolveItem enm]
			if itm is null
				say "You don't see that here. If it wants to cuddle, it will sooner or later come to you."
			else
				say "That doesn't [one of]need[or]want[or]care for[at random] a hug."
		else
			now currentFight.playersTurn is false
			if enm is a phrase and (enm.name is "enemy" or enm.name is "opponent" or enm.name is "monster")
				enm = currentFight.enemy
			else
				enm = [resolveEnemy enm]
			if enm is currentFight.enemy
				if currentFight.enemy.hugProc is not null
					invoke function currentFight.enemy.hugProc on currentFight.enemy
				else
					say "As you approach the enemy to show some affection, you finally realize that this was a bad idea as the [+currentFight.enemy.name] \
							is not interested in becoming your friend or pet and is just using the opening to attack."
			else
				say "You will have to wait until you fight that one again, currently you could only hug the [+currentFight.enemy.name]."
