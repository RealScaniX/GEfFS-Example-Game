This is Combat by ScaniX

Entity Combat is an Entity
	attributes
		combatant player
		combatant enemy 
		bool enemyStarts is false
		bool playersTurn is false		// true as long the player did not invoke a fight action (block, attack, use item)
		bool finished is true			// if we are not fighting, it is finished
		list events

Entity Combatant is an Entity
	attributes
		number constitution     // either darkness or nothing (as the player health is processed differently)
		number hp					// current health, is set to health at the beginning of the fight
		number strength			// either light or darkness
		text attackProc			// called to attack, the return value is damage done
		text woundProc				// called to receive damage, if this returns true the combatant is defeated and the fight is over
										// the damage to process will be stored in the variable "dmg"
		text introProc				// called when the fight starts
		list dropTable				// list of items that the enemy will drop after being defeated in the form {Entity item, number probability}
		bool defends				// if true, the combatant tries to block an attack, reducing the damage
		number level				// the level of the enemy (1-10), for a player the glow is used
		bool firstEncounter is true		// false if the player already encountered this

Entity Item
	attributes
		bool combatUse is false

before function updateaudio
	if !currentFight.finished
		// keep playing fight music
		return

There is a Combat called currentFight
	it is static // don't save
	its player is player Combatant

mode Fight
   its prompt is "Fight!"
   its status info is @[fightStatusInfo]
	before action do
		currentFight.playersTurn = true
		currentFight.player.defends = false
		currentFight.enemy.defends = false
   after action do
		if currentFight.finished
			end mode
		else
			if !currentFight.playersTurn
				invoke function "doEnemyTurn" on currentFight.enemy
			if !currentFight.finished
				fightPrompt
	on start do
		globals.fightMusic = "Exciting Trailer.mp3"
		playMusic globals.fightMusic
		playAmbience null
		currentFight.finished = false
		/************************************
				fill in enemy values
		*************************************/
		now currentFight.enemy.hp is currentFight.enemy.constitution
		/************************************
				fill in player values
		*************************************/
		// player health is taken from fear, no need to set a hp here
		currentFight.player.strength = 3 + (player.glow / 2 + player.illumination / 3) % 10000 // modulo converts it to an int ^-^
		// add weapon strength
		/************************************
				enemy has the first attack?
		*************************************/
		if currentFight.enemy.introProc is not null
			invoke function currentFight.enemy.introProc on currentFight.enemy
		currentFight.enemy.firstEncounter = false
		now currentFight.playersTurn is !currentFight.enemyStarts
	on end do
		updateaudio
		mainPrompt

function fightStatusInfo
	do
		return "<div style=\"float:right;\">
						<htmlbar \"Enemy\" [+currentFight.enemy.hp]/[+currentFight.enemy.constitution]>
						<htmlbar \"Fear\" [+player.fear]/100>
					</div>Your opponent: [+currentFight.enemy.name]\n
							Your strength: [+currentFight.player.strength]"

function fightPrompt
	do
		eventProcessing
		say "\nWhat are you going to do? [link attack]attack[/link] [link defend]defend[/link] [link use item]use item[/link] [link flee]flee[/link]"

function startFight
	understand
		startFight [enmy]
	do
		if not (enmy is a combatant)
			return
		now currentFight.enemy is enmy
		now currentFight.enemyStarts is false // todo: calculate somehow depending on the situation
		start Fight mode

function doEnemyTurn
	do
		// attack player
		if currentFight.enemy.attackProc is not null
			now dmg is [invoke function currentFight.enemy.attackProc on currentFight.enemy]
			if dmg > 0
				if [invoke function currentFight.player.woundProc on currentFight.player]
					// the player already ran home because of his fear
					currentFight.finished = true
		
/*
 *		Player actions
 */
action flee
	modes
		fight
	do
		say "Do you really want to get away from here?"
		ask whether "Flee?"
		if !user.consented or user.canceled
			return
		now currentFight.playersTurn is false
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		if random number between 1 and 100 < 80
			say "you fled"
			currentFight.finished = true
		else
			say "you don't get away fast enough."

action defend
	modes
		fight
	do
		now currentFight.playersTurn is false
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		currentFight.player.defends = true

action attack
	modes
		fight
	do
		now currentFight.playersTurn is false
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		now dmg is [invoke function currentFight.player.attackProc on currentFight.player]
		if dmg > 0
			if [invoke function currentFight.enemy.woundProc on currentFight.enemy]
				// the player killed it
				say "You won!"
				// drop something
				// add experience points (glow)
				if player.glow < enemyLevel * 10
					player.glow = player.glow + (enemyLevel * 10 - player.glow) / 2
				currentFight.finished = true
		
before action use
	now t is [resolveitem t]
	if t is an item and !t.combatUse
		say "You cannot use that now."
		return

action use item
	modes
		fight
	do
		now enemyName is currentFight.enemy.name
		now enemyLevel is currentFight.enemy.level
		// list all combat usable items and ask player what he wants to use
		say "What do you want to use? ..."
		

action fight
	do
		startFight dark spark
