This is gefis one basics by ScaniX

There is a ValueSponge called Globals
	its chapter is -1
	its directions are {"north", "west", "east", "south", "northeast", "northwest", "southeast", "southwest", "up", "down"}

There is a ValueSponge called temps
	it is static

when play begins
	stop audio channel "music"
	stop audio channel "sound"
	stop audio channel "ambience"

when play resumes
	stop audio channel "sound"

Entity Thing is an Entity
   attributes
		bool discovered is true
		text description
		text smell is "This smells like nothing really."
		text taste is "You'd rather not taste that. For now."
		text sound is null // if something is not a sound but still has a sound to it
		list actions are {"look at", "use", "listen to", "smell", "taste"}
		text useProc
		text useWithProc			// [t] the item itself, [itm] the target

entity Item is a Thing
	its actions are {"look at", "use", "take", "smell", "taste"}
   attributes
		bool carryable is true
      number weight

entity Sound is a Thing
	attributes
		text soundDesc is "You hear nothing special."

entity Equippable is an item
	attributes
		bool equipped

entity playercharacter is a thing
	attributes
		place location
		number fear is 30
		number glow is 0  // the inner light value of the player

there is a playercharacter called Player
	its location is entry hall

action lookat
	understand
		look [smt]
		look at [smt]
		look at the [smt]
	do
		if player.illumination < 5
			say "In the total darkness you see totally nothing."
			return
		// can you see that?
		now smt is [resolveitem smt]
		if smt is a sound
			say "Looking at a sound makes your head feel dizzy..."
		else if smt is a thing
			say smt.description
			// add contents
			if smt is a container and smt.listContentsOnLook
				listContents smt
		else
			say "You don't see that."

action smell
	understand
		smell [smt]
	do
		// can you see that?
		now smt is [resolveitem smt]
		if smt is a sound
			say "The sound smells kind of green. With a little bit of monday morning mixed into it."
		else if smt is a thing
			say smt.smell
		else
			say "You don't see that."

action taste
	understand
		taste [smt]
	do
		// can you see that?
		now smt is [resolveitem smt]
		if smt is a sound
			say "The sound tastes like no other sound that you've tasted before. Well, except the one of those church bells."
		else if smt is a thing
			say smt.taste
		else
			say "You don't see that."

action listen
	understand
		listen to [smt]
	do
		// can you see that?
		now smt is [resolveitem smt]
		if smt is null
			say "You don't hear that."
		else if smt.sound is not null
			say smt.sound
		else if smt is not a sound
			say "There isn't really a sound to it. Unless you smash it into a wall, of course..."
		else 
			say smt.soundDesc

function visibleItemList
	understand
		visibleItemList [ext]
	do
		now itemlist is a new list
		// items of place
		for each itm in player.location.items
			if itm.discovered
				if ext
					now inf is a new list
					add itm to inf
					add player.location.itemCount.(itm.id) to inf
					add player.location to inf
					add inf to itemlist
				else
					add itm to itemlist
				addContainerItems itm, false, ext
		return itemlist

function resolveitem
	understand
		resolveitem [itm]
	do
		// copy only items from visibleitemlist
		now vlist is [visibleitemlist false]
		// add inventory stuff
		now ilist is [inventoryList]
		for each x in ilist
			add x to vlist
		// add enemy
		if !currentFight.finished
			add currentFight.enemy to vlist
		// add location
		add player.location to vlist
		// add scar
		if globals.scarVisible
			add scar to vlist
		// convert from string
		if itm is a text
			now itm is a new Phrase called itm
		if itm is a Phrase
			if vlist has itm
				now itm is vlist.(key of itm in vlist)
			else
				now itm is null
		else if not (vlist has itm)
			now itm is null
		return itm

action open
	understand
		open [d]
	do
		now d is [resolveitem d]
		if d is null
			say "You don't see that here."
		else if d is a doorPassage
			setDoor d, true
		else if d is a container
			setContainer d, true
		else
			say "You don't know how to open this."

action close
	understand
		close [d]
	do
		now d is [resolveitem d]
		if d is null
			say "You don't see that here."
		else if d is a doorPassage
			setDoor d, false
		else if d is a container
			setContainer d, false
		else
			say "You don't know how to close this."

action unlockwithkey
	understand
		unlock [d] with [k]
		unlock the [d] with the [k]
		unlock [d] with a [k]
		unlock the [d] with a [k]
	do
		now d is [resolveitem d]
		now k is [resolveitem k]
		if d is null
			say "You don't see that here."
			return
		if k is null
			say "You don't see that key here."
			return
		if not (k is a key)
			if k.useWithProc is not null
				now t is k
				now itm is d
				invoke function k.useWithProc
			else
				say "You cannot open anything using [a|an][+k.name]."
			return
		if not (player.inventory has k)
			say "[one of]Wishful thinking will not let that key materialize in your hand. Or will it?[or]Sticking your hand into your pocket you regretfully realize that you don't have this key.[at random]"
			return
		if d is a doorPassage or d is a container
			if not d.locked
				say "You (or someone else) already successfully unlocked the [+d.name]."
			else if d.key is k
				now d.locked is false
				say "You successfully unlock the [+d.name] using the [+k.name]."
			else
				say "[one of]You try every possible angle, but that key will not open the [+d.name].[or]Sheer force will not make that key fit either. The [+d.name] stays locked.[at random]"
		else
			say "You don't know how to unlock this with the [+k.name] (or anything else for that matter)."

action usewith
	understand
		use [t] with [itm]
		use [t] on [itm]
	do
		now t is [resolveitem t]
		now itm is [resolveitem itm]
		if t is null or itm is null
			say "You don't see that here."
		else if t is an item and ![playerOwns t]
			say "You should probably take the [+t.name] first."
		else if t is an item and t.useWithProc is not null
			invoke function t.useWithProc on t
		else if t is an item and t.useWithProc is not null
			t2 = itm
			itm = t
			t = t2
			invoke action usewith
		else
			invoke action use

action use
	understand
		use [t]
	do
		now t is [resolveitem t]
		if t is null
			say "You don't see that here."
		else if t is a doorPassage
			setDoor t, (not t.open)
		else if t is a container
			setContainer t, (not t.open)
		else if t is an item and ![playerOwns t]
			say "You should probably take it first."
		else if t has "useProc"
			invoke function t.useProc on t
		else
			say "[one of]You don't know how to use this[or]This is totally useless[or]Maybe this is like art: Looking at it is all it is good for[at random]."

understand
	"look" as "look around"

function rememberMusicPos
	do
		remember position of audio channel "music"
		now globals.restoreMusicPos is true

function restoreMusicPos
	do
		if globals.restoreMusicPos
			restore position on audio channel "music"
		now globals.restoreMusicPos is false

function rememberAmbiencePos
	do
		remember position of audio channel "ambience"
		now globals.restoreAmbiencePos is true

function restoreAmbiencePos
	do
		if globals.restoreAmbiencePos
			restore position on audio channel "ambience"
		now globals.restoreAmbiencePos is false

function playmusic
	understand
		playmusic [track], [vol]
	do
		now globals.musicVolume is vol
		if globals.musictrack is track
			resume audio channel "music" with volume vol
			return
		if track is null
			stop audio channel "music"
		else
			loop track on audio channel "music" with volume vol
		now globals.musictrack is track

function playambience
	understand
		playambience [track], [vol]
	do
		now globals.ambienceVolume is vol
		if globals.ambiencetrack is track
			if track is not null
				resume audio channel "ambience" with volume vol
			return
		if track is null
			stop audio channel "ambience"
		else
			loop track on audio channel "ambience" with volume vol
		now globals.ambiencetrack is track

action wait
	do
		say "[one of]You decide to do... nothing.[or]Time to take a deep breath.[or]You're taking a second to think about your situation.[at random]"

action smellaround
	understand
		smell
	do
		smt = player.location
		invoke action "smell"

