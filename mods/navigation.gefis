This is navigation by ScaniX

entity Place is a Thing
	its actions are {"look at $"}
   attributes
      bool known
      list persons
      list items
      map exits   // either a place or a door
		text intro	// text to be said when first entering a place
		number illumination // is there a light in this place?
		bool navigatable is true // if false we are somewhere that cannot be entered/left by normal means
		key key is master key

entity Passage is a Thing
	its description is @[passagedesc]
	its actions are {"look at $", "go $"}
	attributes
		place origin
		place destination
		bool passable is true

function passagedesc
	do
		if player.location is this.destination and this.origin.known
			return "This leads to the " + this.origin + "."
		else if player.location is this.origin and this.destination.known
			return "This leads to the " + this.destination + "."

entity Door is a Passage
	its passable is @[doortrip]
	its actions are {"look at $", "open $", "close $"}
	its description is @[doordesc]
   attributes
      bool locked
      bool open
      key key

function doordesc
	do
		return "The door looks pretty normal for [a|an][if this.open]open[else]closed[end] door. " + [passagedesc]

function doortrip
	do
		if this.locked
			say "This door is locked."
			return false
		else if not this.open
			openclosedoor this, true
		return true

function openclosedoor
	understand
		openclosedoor [d], [state]
	do
		if not (d is a Door)
			say "You don't know how to open this."
			return
		if not (player.location.exits has d)
			say "You don't see this here."
			return
		if d.open is state
			if d.open
				say "Isn't it open enough for you?"
			else
				say "It already is closed. It might not be airtight, but there is nothing you can do about it."
			return
		now d.open is state
		play "doorHandle.mp3" on audio channel sound with volume 100
		flush
		sleep 0.95
		if d.open
			play "doorOpen.mp3" on audio channel sound with volume 100
		else
			play "doorClose.mp3" on audio channel sound with volume 100
		flush
		sleep 0.5
		say "You [if state]open[else]close[end] the door."

entity Stairway is a Passage
	its passable is @[stairwaytrip]
	its actions are {"look at", "go $"}

function stairwaytrip
	do
		if chance of (player.location.illumination + player.illumination) in 50
			// all fine
			return true
		otherwise
			// player tripped in the dark
			if player.location is this.origin
				// moving up
				say "You trip because of the dim light and hit your knee on the step. *ouch!*\n"
			else
				// moving down
				say "Halfway down you misplace your foot in the dark and were coming down faster than planned."
			// still managed to get to the destination though
			return true

entity Key is an item

there is a key called master key

action navigate
   understand
      go [destination]
   modes
      main
   do
		// NOTE: if there are closed doors inbetween... we just assume the player opened, went through and closed them again
		// NOTE: if there are locked doors inbetween... we should have set one of the places to !navigatable
      //say "You want to go " + destination.name + "."
		// can we navigate at all?
		if not player.location.navigatable
			say "[one of]You cannot leave this place.[or]There is no easy way out from here.[or]You see no exit.[at random]"
			return
		// find target
		if destination is a place
         //say destination.name+" is a place."
			// we can go there if it is known and we can navigate
			if destination.known
				if destination.navigatable
					go to place destination
					return
		else if destination is a passage
			followpassage destination
			return
		else
         //say destination.name+" is not a place."
			// no place, but is that the name of a passage?
			if player.location.exits has destination.name
				//say "It is an exit."
				now exit is player.location.exits.(destination.name)
				if exit is a place
					say "The exit " + destination.name + " leads to the place " + exit + "."
					go to place exit
				else if exit is a passage
					followpassage exit
				return
		say "You don't know such a place nor a path leading to it."

function followpassage
	understand
		followpassage [p]
	do
		//say "The exit " + exit.name + " is a passage between "+exit.origin+" and "+exit.destination+"."
		if p.passable
			if player.location is p.origin
				//say "Following the passage forward."
				go to place p.destination
			else if player.location is p.destination
				//say "Following the passage backwards."
				go to place p.origin
			else
				say "We seem to have run into an error..."


function gotoplace
	understand
		go to place [destination]
	do
		if not destination is a place
			say "The destination is no place! :(\n"
			return
		now player.location is destination
		if not player.location.known
			now player.location.known is true
			say player.location.intro
		//do look around

action lookaround
	understand
		look around
	do
		say player.location.description


action entest
	do
		now x is new place
		say "key is: " + x.key
		say "."
		now y is new door
		say "passable: " + y.passable

