This is navigation by ScaniX

there is a valuesponge called OneStats
	its movements is 0

entity Place is a Thing
	its actions are {"look at $"}
   attributes
      bool known
      list persons
      map exits   // either a place or a doorPassage
		text intro	// text to be said when first entering a place
		bool navigatable is true // if false we are somewhere that cannot be entered/left by normal means
		text ambience    // name of audio track for ambience
		number ambienceVolume is 80
		text music is "Quinns Song-First Night.mp3"		// name of audio track for music
		number musicVolume is 70
		text afterProc		// an optional function that is called before the main afterProc function
		list regions				// the regions this place belongs to

before function mainPrompt
	if player.location.afterProc is not null
		invoke function player.location.afterProc

when play resumes
	stop audio channel "sound"
	now x is globals.ambiencetrack
	globals.ambiencetrack = "xxx"
	playambience x, globals.ambienceVolume
	now x is globals.musictrack
	globals.musictrack = "xxx"
	playmusic x, globals.musicVolume

entity Passage is a Thing
	its description is @[passagedesc]
	its actions are {"look at", "go"}
	attributes
		text preproc		// the name of a function to call before trying to use this passage
		place origin
		place destination
		bool passable is true

function passagedesc
	do
		if player.location is this.destination and this.origin.known
			return "This leads to the " + this.origin + "."
		else if player.location is this.origin and this.destination.known
			return "This leads to the " + this.destination + "."

entity doorPassage is a Passage
	its preproc is "doortrip"
	its passable is @this.open
	its actions are {"look at", "open", "close", "unlock", "go"}
	its description is @[doordesc]
   attributes
      bool locked
      bool open
      key key
		text openSound is "doorM_open_new.ogg"
		text closeSound is "doorM_close_new.ogg"
		text lockedProc is "doorLockedProc"

function doorLockedProc
	do
		play "doorLocked.mp3" on audio channel "sound" with volume 100
		say "A push on the door handle reveals that this door is locked."

function doordesc
	do
		append "The door looks pretty normal for [a|an][if this.open]open[else]closed[end] door.[if this.open] [+passagedesc][end]\n"

function doortrip
	do
		if this.locked
			invoke function this.lockedProc on this
			return false
		else if not this.open
			setDoor this, true
		return true

function setDoor
	understand
		setDoor [d], [state]
	do
		if d is not a doorPassage
			say "You don't know how to open this."
			return
		if not (player.location.exits has d) and not (player.location.items has d) 
			say "You don't see this here."
			return
		if d.open is state
			if d.open
				say "Isn't it open enough for you?"
			else
				say "It already is closed. It might not be airtight, but there is nothing you can do about it."
			return
		if d.locked and state
			invoke function d.lockedProc on d
			return
		now d.open is state
		if d.open
			play d.openSound on audio channel "sound" with volume 100
		else
			play d.closeSound on audio channel "sound" with volume 100
		flush
		sleep 0.5
		say "You [if state]open[else]close[end] the door."

entity Stairway is a Passage
	its preproc is "stairwaytrip"
	its passable is true
	its actions are {"look at", "go $"}

function stairwaytrip
	do
		if chance of player.illumination in 50
			// all fine
			return true
		otherwise
			// player tripped in the dark
			if player.location is this.origin
				// moving up
				say "You trip because of the dim light and hit your knee on the step. *ouch!*\n"
			else
				// moving down
				say "Halfway down you misplace your foot in the dark and were coming down faster than planned."
			// still managed to get to the destination though
			return true

entity Key is an item
	its actions are {"look at", "use", "take"}
	its useProc is "usekey"

function usekey
	do
		if not [playerOwns this]
			say "You should take that before using it."
			return
		say "Now that you have the [+this.name] in your hand, what will you unlock with it?"
		ask "Use it with..."
		if user.canceled
			return
		now d is [resolveitem user.input]
		if d is null
			say "You cannot unlock what isn't even there."
		else
			now k is this
			invoke action "unlockwithkey"

function resolveDestination
	understand
		resolveDestination [itm]
	do
		if itm is a Phrase
			for each x in player.location.exits
				if x is itm
					return x
			for each x in player.location.items
				if x is itm and x is a passage
					return x
		return itm

action navigate
   understand
      go [destination]
   do
      //say "You want to go " + destination.name + "."
		now destination is [resolveDestination destination]
		// can we navigate at all?
		if not player.location.navigatable
			say "[one of]You cannot leave this place.[or]There is no easy way out from here.[or]You see no exit.[at random]"
			return
		// find target
		if destination is a place and destination.known
			if destination is player.location
				say "You are already there."
				return
			// look for passage to that place
			for each exit in player.location.exits
				if exit is destination
					goToPlace exit
					return
				else if exit is a passage and exit.destination is destination or exit.origin is destination
					followpassage exit
					return
			say "You cannot go there from here."
			return
		else if destination is a passage
			followpassage destination
			return
		else
         //say destination.name+" is not a place."
			// no place, but is that the name of a passage?
			if player.location.exits has destination.name
				//say "It is an exit."
				now exit is player.location.exits.(destination.name)
				if exit is a place
					//say "The exit " + destination.name + " leads to the place " + exit + "."
					goToPlace exit
				else if exit is a passage
					followpassage exit
				return
		if globals.directions has destination.name
			say "You cannot go in that direction."
		else
			say "You don't know such a place nor a path leading to it."

function followpassage
	understand
		followpassage [p]
	do
		//say "The exit " + exit.name + " is a passage between "+exit.origin+" and "+exit.destination+"."
		if not (p.preproc is null)
			invoke function p.preproc on p
		if p.passable
			if player.location is p.origin
				//say "Following the passage forward."
				goToPlace p.destination
			else if player.location is p.destination
				//say "Following the passage backwards."
				goToPlace p.origin
			else
				say "We seem to have run into an error..."

function goToPlace
	understand
		goToPlace [destination]
	do
		if destination is not a place
			say "The destination is no place! :(\n"
			return
		now player.location is destination
		if not player.location.known
			now player.location.known is true // do this before saying intro, because some intros reset this to false again
			say player.location.intro
		OneStats.movements = OneStats.movements + 1
		updateaudio

function updateaudio
	do
		playambience player.location.ambience, player.location.ambienceVolume
		//restoreAmbiencePos
		playmusic player.location.music, player.location.musicVolume
		restoreMusicPos

action lookaround
	understand
		look around
		look
	do
		say player.location.description
		for each itm in player.location.items
			itm.discovered = true

understand
	"n" as "go north"
	"ne" as "go northeast"
	"e" as "go east"
	"s" as "go south"
	"se" as "go southeast"
	"sw" as "go southwest"
	"nw" as "go northwest"
	"w" as "go west"
	"north" as "go north"
	"northeast" as "go northeast"
	"east" as "go east"
	"south" as "go south"
	"southeast" as "go southeast"
	"southwest" as "go southwest"
	"northwest" as "go northwest"
	"west" as "go west"
	"up" as "go up"
	"down" as "go down"

