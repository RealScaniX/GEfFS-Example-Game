This is Illumination by ScaniX

entity Place 
   attributes
		number illumination // is there a light in this place?

entity playercharacter is a thing
	attributes
		number illumination  // this value defines how much the player can "see"
		lightsource light    // in the beginning we only have matches

entity item
	attributes
		number illumination is 0

entity lightsource is an item
	attributes
		number steps // how many steps does this last?
		number usedSteps // how many steps are used
		bool lit is false // we expect a specific light source to have a function here
		text emptyMessage is "There is no more light in the [+light.name]."

there is an event called light_update_event
	its eventproc is "lightsource_update"
	its always is true
	its repeat is true
	its probability is 100

there is an event called playerSoothing
	its eventProc is "playerSoothing"
	its always is true
	its repeat is true
	its probability is 80

function playerSoothing
	do
		if currentFight.finished and player.fear > 10
			player.fear = max of 10 and (player.fear - (max of 2 and player.glow / 10))

function lightsource_update
	do
		now l is player.light
		if l is not null
			l.usedSteps = l.usedSteps + 1
			if l.usedSteps > l.steps
				say "Your lightsource just went dark."
/*				say "Your lightsource just went dark. As your eyes have been adjusted to this \
						[if l.illumination > 70]blinding[else if l.illumination > 40]bright[else if l.illumination > 20]small[else]dim[end] \
						light you need a few seconds to see anything in the dark that now surrounds you." */
				now player.light is null
			else if l.usedSteps is l.steps - 2
				say "Your lightsource starts flickering..."
		player.illumination = player.location.illumination
		if player.light is a lightsource and player.light.lit
			player.illumination = player.illumination + player.light.illumination
		now ilist is [inventoryList]
		for each itm in ilist
			if itm is a equippable 
				if itm.equipped
					player.illumination = player.illumination + itm.illumination
			else if itm is not a lightsource // non equippables always shine
				player.illumination = player.illumination + itm.illumination
		player.illumination = min of player.illumination and 100

function setlight
	understand
		setlightsource [light]
	do
		if light is not null
			if light.usedSteps >= light.steps
				say light.emptyMessage
				return
		player.light = light

function glow
	understand
		glow [amount]
	do
		player.glow = player.glow + amount
		if player.glow > 100
			player.glow = 100
		else if player.glow < 0
			player.glow = 0

function scare
	understand
		scare [amount], [msg]
		scare [amount]
	do
		if msg is not empty
			say "<span style=\"text-shadow: 0px 1px 1px #FF0000;filter:dropshadow(color=#FF0000, offx=0, offy=1);\">[+msg]</span>"
		player.fear = player.fear + amount
		if player.fear >= 100
			player.fear = 99
			if currentFight.finished && alternativeEntryHall.known // do not say this when entering chapter 1
				say "Your fear is stopping you from going any further and you have the strong urge to be back where you are safe."
			goToPlace alternativeEntryHall
			return true
		return false

function soothe
	understand
		soothe [amount], [msg]
		soothe [amount]
	do
		if msg is not empty
			say "<span style=\"text-shadow: 0px 1px 1px #2080FF;filter:dropshadow(color=#2080FF, offx=0, offy=1);\">[+msg]</span>"
		player.fear = max of 0 and (player.fear - amount)
		
when play begins or resumes
	add light_update_event to player.events
	add playerSoothing to player.events

before function goToPlace
	now illu is destination.illumination
	if player.light is not null and player.light.lit
		illu = illu + player.light.illumination
	now ilist is [inventoryList]
	for each itm in ilist
		if itm is a equippable 
			if itm.equipped
				illu = illu + itm.illumination
		else if itm is not a lightsource // non equippables always shine
			illu = illu + itm.illumination
	if illu < 10 and player.glow < 100
		say "Staring into the [one of]darkness[or]pitch black hole[at random] in front of you, you decide that you'd rather not go there without any light."
		return

before action lookat
	do
		if player.illumination < 5
			say "In the total darkness you see totally nothing."
			return

before action lookaround
	do
		if player.illumination < 5
			say "In the total darkness you see totally nothing."
			return

before action open
	do
		if player.illumination < 5
			say "It is too dark to even see what you want to open."
			return

before action close
	do
		if player.illumination < 5
			say "It is too dark to even see what you want to close."
			return

before action takeitem
	do
		if player.illumination < 10
			say "It is too dark to even see what you want to take."
			return

before action unlockwithkey
	do
		if player.illumination < 10
			say "It is too dark to even see what you want to unlock."
			return

before action unlock
	do
		if player.illumination < 10
			say "It is too dark to even see what you want to unlock."
			return

