This is containers by ScaniX

Entity container is an item
	its actions are {"look at", "open", "close"}
	its carryable is false
	attributes
		bool locked is false
		bool open is false
		bool known is false
		list items
		bool listContentsOnLook is true

function setContainer
	understand
		setContainer [d], [state]
	do
		if not (d is a container)
			say "You don't know how to open this."
			return
/*
		if not (player.location.items has d)
			say "You don't see this here."
			return
*/
		if d.open is state
			if d.open
				say "Isn't it open enough for you?"
			else
				say "It already is closed. It might not be airtight, but there is nothing you can do about it."
			return
		if state and d.locked
			say "The [+d.name] is locked."
			return
		now d.open is state
		/*
		if d.open and !d.known
			now d.known is true
			for each itm in d.items
				now itm.discovered is true*/
		say "You [if state]open[else]close[end] the [+d.name]."

function discovercontainer
	understand
		discovercontainer [d]
	do
		if not (d is a container)
			return
		if d.open
			now d.known is true
			for each itm in d.items
				now itm.discovered is true

function addContainerItems
	understand
		addContainerItems [cnt], [includeClosed]
	do
		if cnt is a container and not cnt.locked and (cnt.open or includeClosed) // locked is not an issue here as we check the discovered flag of the items
			for each containeritem in cnt.items
				if containeritem.discovered
					add containeritem to itemlist
					addContainerItems containeritem, includeClosed

function isInContainer
	understand
		isInContainer [itm], [cnt]
	do
		if not (cnt is a container)
			return false
		for each i in cnt.items
			if i is itm
				return true
			else if i is a container and [isInContainer itm, i]
				return true
		return false

function listContents
	understand
		listContents [cnt]
	do
		if cnt is a container
			if cnt.open
				say "It contains: "
				if cnt.items is empty
					say "[one of]Nothing[or]Air[or]Space for stuff[or]A yearning to be filled[at random]."
				else
					now i is 0
					for each itm in cnt.items
						say "[if i > 0], [end][invItemLink itm]"
						now itm.discovered is true
						now i is i + 1
					say "\n"
			else
				say "It is closed."

action putinto
	understand
		put [itm] into [cnt]
		put the [itm] into the [cnt]
	do
		// do we see this item in the place?
		now itm is [resolveitem itm]
		if itm is null
			say "You don't see that."
			return
		// Item?
		if not itm is a item
			say "That cannot be moved."
			return
		// Carryable?
		if not itm.carryable
			say "You cannot carry that."
			return
		// is target a container?
		if cnt is a place
			// ok, nothing to do
		else if not (cnt is a container)
			say "You cannot put anything into that."
			return
		else if not cnt.open and cnt.locked
			say "The [+cnt.name] is locked."
			return
		// Find current container
		now currContainer is null
		if player.location.items has itm
			now currContainer is player.location
		else
			for each cnt2 in player.location.items
				if cnt2 is a container && cnt2.items has itm
					now currContainer is cnt2
					break
		// if the thing is not owned, but the container is, we take the item first
		if [playerOwns currContainer] and currContainer is not null
			addToInv itm
		// Remove from container
		if currContainer is null
			if [playerOwns itm]
				now currContainer is [getInventoryContainer player.inventory, itm, player.inventory]
				//now currContainer is player.inventory
			if currContainer is null
				// if container is null, we don't see that either
				say "You don't see that here."
				return
		// Add to container
		if currContainer is a container or currContainer is a place
			remove itm from currContainer.items
		else
			remove itm from player.inventory
		add itm to cnt.items
		say "You [one of]put[or]drop[or]kick[or]throw[at random] the [+itm.name] into the [+cnt.name]."
