This is containers by ScaniX

Entity container is an item
	its actions are {"look at", "open", "close", "take"}
	its carryable is false
	attributes
		bool locked is false
		bool open is false
		bool known is false			// we looked inside
		list items
		map itemCount
		bool listContentsOnLook is true

Entity Place
	attributes
      list items
		map itemCount

function setContainer
	understand
		setContainer [d], [state]
	do
		if not (d is a container)
			say "You don't know how to open this."
			return
		if d.open is state
			if d.open
				say "Isn't it open enough for you?"
			else
				say "It already is closed. It might not be airtight, but there is nothing you can do about it."
			return
		if state and d.locked
			say "The [+d.name] is locked."
			return
		now d.open is state
		say "You [if state]open[else]close[end] the [+d.name]."

function discovercontainer
	understand
		discovercontainer [d]
	do
		if not (d is a container)
			return
		if d.open
			now d.known is true
			for each itm in d.items
				now itm.discovered is true

function addContainerItems
	understand
		addContainerItems [cnt], [includeClosed], [ext]
	do
		if cnt is a container and not cnt.locked and (cnt.open or includeClosed) // locked is not an issue here as we check the discovered flag of the items
			for each containeritem in cnt.items
				if containeritem.discovered
					if ext
						now inf is a new list
						add containeritem to inf
						add cnt.itemCount.(containeritem.name) to inf
						add cnt to inf
						add inf to itemlist
					else
						add containeritem to itemlist
					addContainerItems containeritem, includeClosed, ext

function isInContainer
	understand
		isInContainer [itm], [cnt]
	do
		if not (cnt is a container)
			return false
		for each i in cnt.items
			if i is itm
				return true
			else if i is a container and [isInContainer itm, i]
				return true
		return false

function listContents
	understand
		listContents [cnt]
	do
		if cnt is a container
			if cnt.open
				cnt.known = true
				say "It contains: "
				if cnt.items is empty
					say "[one of]Nothing[or]Air[or]Space for stuff[or]A yearning to be filled[at random]."
				else
					now i is 0
					for each itm in cnt.items
						say "[if i > 0], [end][invItemLink itm]"
						now itm.discovered is true
						now i is i + 1
					say "\n"
			else
				say "It is closed."

action putinto
	understand
		put [itm] into [cnt]
		put the [itm] into the [cnt]
	do
		// do we see this item in the place?
		now itm is [resolveitem itm]
		if itm is null
			say "You don't see that."
			return
		// Item?
		if not itm is a item
			say "That cannot be moved."
			return
		// Carryable?
		if not itm.carryable
			say "You cannot carry that."
			return
		// is target a container?
		if cnt is a place
			// ok, nothing to do
		else if not (cnt is a container)
			say "You cannot put anything into that."
			return
		else if not cnt.open and cnt.locked
			say "The [+cnt.name] is locked."
			return
		else if not cnt.known
			say "You probably should take a peek in it first."
			return
		// Find current container
		now currContainer is null
		if player.location.items has itm
			now currContainer is player.location
		else
			for each cnt2 in player.location.items
				if cnt2 is a container && cnt2.items has itm
					now currContainer is cnt2
					break
		putIntoDirect

function putIntoDirect
	do
		// if the thing is not owned, but the container is, we take the item first
		//if [playerOwns currContainer] and currContainer is not null
		//	addToInv itm
		// Remove from container
		if currContainer is null
			if [playerOwns itm]
				now currContainer is [getInventoryContainer player.inventory, itm, player.inventory]
				//now currContainer is player.inventory
			if currContainer is null
				// if container is null, we don't see that either
				say "You don't see that here."
				return
		// remove from old container
		removeFromContainer currContainer, itm
//		if cnt is a container or cnt is a place
//			removeFromContainer currContainer, itm
//		else
//			removeFromInv itm
		// Add to container
		addToContainer cnt, itm
		say "You [one of]put[or]drop[or]kick[or]throw[at random] the [+itm.name] into the [+cnt.name]."

function removeFromContainer
	understand
		removeFromContainer [cnt], [itm]
	do
		if cnt is a container or cnt is a place
			cnt.itemCount.(itm.name) = cnt.itemCount.(itm.name) - 1
			if cnt.itemCount.(itm.name) <= 0
				remove itm from cnt.items
			if [playerOwns cnt]
				itm.carried = itm.carried - 1
		else
			removeFromInv itm

function addToContainer
	understand
		addToContainer [cnt], [itm]
	do
		if cnt is a container or cnt is a place
			if not (cnt.items has itm)
				add itm to cnt.items
				cnt.itemCount.(itm.name) = 1
			else
				cnt.itemCount.(itm.name) = cnt.itemCount.(itm.name) + 1
			if [playerOwns cnt]
				itm.carried = itm.carried + 1
		else
			addToInv itm

before function mainPrompt
	if !temps.itemCountFixed
		temps.itemCountFixed = true
		for each p in place.*
			fixItemCount p

function fixItemCount
	understand 
		fixItemCount [cnt]
	do
		for each itm in cnt.items
			if not (cnt.itemCount has itm.name) or cnt.itemCount.(itm.name) == 0
				cnt.itemCount.(itm.name) = 1
			if itm is a container
				fixItemCount itm

